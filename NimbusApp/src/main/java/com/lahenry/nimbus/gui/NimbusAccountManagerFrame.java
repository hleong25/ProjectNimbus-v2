/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lahenry.nimbus.gui;

import com.lahenry.nimbus.accountmanager.AccountInfo;
import com.lahenry.nimbus.accountmanager.AccountManager;
import com.lahenry.nimbus.clouds.CloudType;
import com.lahenry.nimbus.clouds.dropbox.DropboxController;
import com.lahenry.nimbus.clouds.google.drive.GDriveController;
import com.lahenry.nimbus.clouds.interfaces.ICloudController;
import com.lahenry.nimbus.clouds.local.LocalController;
import com.lahenry.nimbus.gui.components.AccountInfoButton;
import com.lahenry.nimbus.gui.helpers.BusyTaskCursor;
import com.lahenry.nimbus.gui.helpers.IconFactory;
import com.lahenry.nimbus.mainapp.AppInfo;
import com.lahenry.nimbus.utils.Logit;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author henry
 */
public class NimbusAccountManagerFrame extends javax.swing.JFrame
{
    private static final Logit LOG = Logit.create(NimbusAccountManagerFrame.class.getName());

    protected AccountInfo m_account = null;

    /**
     * Creates new form NimbusAccountManagerFrame
     */
    public NimbusAccountManagerFrame()
    {
        LOG.entering("<init>");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlAccounts = new javax.swing.JSplitPane();
        pnlExistingAccounts = new javax.swing.JPanel();
        pnlAccount = new javax.swing.JPanel();
        pnlAccountDetails = new javax.swing.JPanel();
        lblIconType = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblAccountId = new javax.swing.JLabel();
        txtAccountId = new javax.swing.JTextField();
        pnlAccountActions = new javax.swing.JPanel();
        btnDelete = new javax.swing.JButton();
        btnConnect = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuAddAccount = new javax.swing.JMenu();
        mnuAddGoogleDrive = new javax.swing.JMenuItem();
        mnuAddDropbox = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(AppInfo.Name);
        setMinimumSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        pnlExistingAccounts.setMinimumSize(new java.awt.Dimension(200, 10));
        pnlExistingAccounts.setPreferredSize(new java.awt.Dimension(200, 100));
        pnlExistingAccounts.setLayout(new java.awt.GridBagLayout());
        pnlAccounts.setLeftComponent(pnlExistingAccounts);

        pnlAccount.setLayout(new java.awt.BorderLayout());

        pnlAccountDetails.setLayout(new java.awt.GridBagLayout());

        lblIconType.setText("Icon & Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 10, 3);
        pnlAccountDetails.add(lblIconType, gridBagConstraints);

        lblName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        pnlAccountDetails.add(lblName, gridBagConstraints);

        txtName.setEditable(false);
        txtName.setText("Account Name");
        txtName.setMinimumSize(new java.awt.Dimension(100, 19));
        txtName.setName(""); // NOI18N
        txtName.setPreferredSize(new java.awt.Dimension(200, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        pnlAccountDetails.add(txtName, gridBagConstraints);

        lblAccountId.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountId.setText("Account ID:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        pnlAccountDetails.add(lblAccountId, gridBagConstraints);

        txtAccountId.setEditable(false);
        txtAccountId.setText("ID");
        txtAccountId.setMinimumSize(new java.awt.Dimension(100, 19));
        txtAccountId.setName(""); // NOI18N
        txtAccountId.setPreferredSize(new java.awt.Dimension(200, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        pnlAccountDetails.add(txtAccountId, gridBagConstraints);

        pnlAccount.add(pnlAccountDetails, java.awt.BorderLayout.CENTER);

        pnlAccountActions.setLayout(new java.awt.GridBagLayout());

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnDeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        pnlAccountActions.add(btnDelete, gridBagConstraints);

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnConnectActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        pnlAccountActions.add(btnConnect, gridBagConstraints);

        pnlAccount.add(pnlAccountActions, java.awt.BorderLayout.SOUTH);

        pnlAccounts.setRightComponent(pnlAccount);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(pnlAccounts, gridBagConstraints);

        mnuAddAccount.setText("Add Account");

        mnuAddGoogleDrive.setText("Google Drive");
        mnuAddGoogleDrive.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuAddGoogleDriveActionPerformed(evt);
            }
        });
        mnuAddAccount.add(mnuAddGoogleDrive);

        mnuAddDropbox.setText("Dropbox");
        mnuAddDropbox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuAddDropboxActionPerformed(evt);
            }
        });
        mnuAddAccount.add(mnuAddDropbox);

        jMenuBar1.add(mnuAddAccount);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuAddGoogleDriveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mnuAddGoogleDriveActionPerformed
    {//GEN-HEADEREND:event_mnuAddGoogleDriveActionPerformed
        addAccount(CloudType.GOOGLE_DRIVE);
    }//GEN-LAST:event_mnuAddGoogleDriveActionPerformed

    private void mnuAddDropboxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mnuAddDropboxActionPerformed
    {//GEN-HEADEREND:event_mnuAddDropboxActionPerformed
        addAccount(CloudType.DROPBOX);
    }//GEN-LAST:event_mnuAddDropboxActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDeleteActionPerformed
    {//GEN-HEADEREND:event_btnDeleteActionPerformed
        JOptionPane.showConfirmDialog(this, "Deleting account not supported");
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnConnectActionPerformed
    {//GEN-HEADEREND:event_btnConnectActionPerformed
        BusyTaskCursor.doTask(this, new BusyTaskCursor.IBusyTask()
        {
            @Override
            public void run()
            {
                connectToAccount(m_account);
            }
        });
    }//GEN-LAST:event_btnConnectActionPerformed

    public static void showMe()
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                NimbusAccountManagerFrame frame = new NimbusAccountManagerFrame();

                frame.loadAccounts();

                frame.setVisible(true);
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(NimbusAccountManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(NimbusAccountManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(NimbusAccountManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(NimbusAccountManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new NimbusAccountManagerFrame().setVisible(true);
            }
        });
    }

    protected void addAccount(final CloudType cloudType)
    {
        LOG.entering("addAccount", new Object[] {cloudType});

        BusyTaskCursor.doTask(this, new BusyTaskCursor.IBusyTask()
        {
            @Override
            public void run()
            {
                AccountInfo newacct = AccountInfo.createNewAccount(cloudType);

                connectToAccount(newacct);
            }
        });
    }

    protected boolean loadAccounts()
    {
        List<AccountInfo> accounts = AccountManager.getInstance().getAccounts();

        // add the local storage
        {
            AccountInfo localacct = AccountInfo.createInstance(CloudType.LOCAL_FILE_SYSTEM, "localhost");
            localacct.setName(CloudType.LOCAL_FILE_SYSTEM.toString());
            accounts.add(0, localacct);

            showAccount(localacct);
        }

        GridBagConstraints gridbag = new GridBagConstraints();
        gridbag.fill = GridBagConstraints.HORIZONTAL;
        gridbag.anchor = GridBagConstraints.NORTH;
        gridbag.weightx = 1.0;
        gridbag.insets = new Insets(3,3,3,3);

        final int size = accounts.size();
        int idx = 0;

        for (final AccountInfo account : accounts)
        {
            //LOG.fine("Account: "+account.getId());

            AccountInfoButton btn = new AccountInfoButton(account);
            gridbag.gridy++;

            if ((++idx) == size)
            {
                // make last button to have weight 1, so push everything to top
                gridbag.weighty = 1.0;
            }

            btn.addActionListener(new java.awt.event.ActionListener()
            {
                @Override
                public void actionPerformed(ActionEvent e)
                {
                    //LOG.fine("Clicked:" +account.getId());

                    NimbusAccountManagerFrame.this.showAccount(account);
                }
            });

            pnlExistingAccounts.add(btn, gridbag);
        }

        return true;
    }

    protected void showAccount(final AccountInfo account)
    {
        m_account = account;

        CloudType type = account.getType();
        ImageIcon icon = IconFactory.get(type, IconFactory.IconSize.LARGE);

        lblIconType.setIcon(icon);
        lblIconType.setText(type.toString());

        txtName.setText(account.getName());
        txtAccountId.setText(account.getId());

    }

    protected void connectToAccount(final AccountInfo account)
    {
        ICloudController<?> controller = null;
        CloudType cloudType = account.getType();

        switch (cloudType)
        {
            case LOCAL_FILE_SYSTEM:
                controller = new LocalController();
                break;
            case GOOGLE_DRIVE:
                controller = new GDriveController();
                break;
            case DROPBOX:
                controller = new DropboxController();
                break;

            default:
                LOG.severe("Failed to add '"+cloudType.toString()+"' acount.");
                return;
        }

        String uniqueid = account.getId();
        boolean isLogin = controller.login(NimbusAccountManagerFrame.this, uniqueid);

        if (isLogin)
        {
            NimbusFrame frame = NimbusFrame.setupMainPanel(cloudType, controller);

            if (frame != null)
            {
                LOG.info("Showing "+cloudType.toString());

                // show it
                frame.runLater();
            }
            else
            {
                //LOG.warning(MessageFormat.format("Unknown type: {0}", type.toString()));
            }

            // kill me since we're good now
            dispose();
        }
        else
        {
            LOG.severe("Failed to login");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDelete;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lblAccountId;
    private javax.swing.JLabel lblIconType;
    private javax.swing.JLabel lblName;
    private javax.swing.JMenu mnuAddAccount;
    private javax.swing.JMenuItem mnuAddDropbox;
    private javax.swing.JMenuItem mnuAddGoogleDrive;
    private javax.swing.JPanel pnlAccount;
    private javax.swing.JPanel pnlAccountActions;
    private javax.swing.JPanel pnlAccountDetails;
    private javax.swing.JSplitPane pnlAccounts;
    private javax.swing.JPanel pnlExistingAccounts;
    private javax.swing.JTextField txtAccountId;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
