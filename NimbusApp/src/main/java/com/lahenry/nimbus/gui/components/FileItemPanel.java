/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lahenry.nimbus.gui.components;

import com.lahenry.nimbus.clouds.CloudType;
import com.lahenry.nimbus.gui.datatransfer.ListDropboxTransferable;
import com.lahenry.nimbus.gui.datatransfer.ListGDriveTransferable;
import com.lahenry.nimbus.gui.datatransfer.ListLocalTransferable;
import com.lahenry.nimbus.gui.helpers.ColorFactory;
import com.lahenry.nimbus.gui.helpers.FileItemPanelGroup;
import com.lahenry.nimbus.utils.Logit;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragSource;

/**
 *
 * @author henry
 */
public class FileItemPanel
    extends javax.swing.JPanel
    implements DragGestureListener
{
    private static final Logit Log = Logit.create(FileItemPanel.class.getName());

    protected final IFileItem m_item;
    protected FileItemPanelGroup m_group = null;

    /**
     * Creates new form FileItemPanel
     */
    public FileItemPanel(IFileItem item)
    {
        initComponents();

        m_item = item;

        DragSource ds = new DragSource();
        ds.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_COPY, this);

        lblIcon.setIcon(m_item.getIcon());
        lblIcon.setText(null);

        lblLabel.setText(getHtmlLabel(m_item.getLabel()));

        progbar.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        lblIcon = new javax.swing.JLabel();
        lblLabel = new javax.swing.JLabel();
        progbar = new javax.swing.JProgressBar();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        setLayout(new java.awt.BorderLayout());

        lblIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIcon.setText("icon");
        lblIcon.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 2, 0));
        lblIcon.setMaximumSize(new java.awt.Dimension(96, 64));
        lblIcon.setMinimumSize(new java.awt.Dimension(96, 64));
        lblIcon.setPreferredSize(new java.awt.Dimension(96, 64));
        add(lblIcon, java.awt.BorderLayout.CENTER);

        lblLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLabel.setText("label");
        lblLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        add(lblLabel, java.awt.BorderLayout.SOUTH);
        add(progbar, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblLabel;
    private javax.swing.JProgressBar progbar;
    // End of variables declaration//GEN-END:variables

    public IFileItem getFileItem()
    {
        return m_item;
    }

    protected String getHtmlLabel(String str)
    {
        final int max_width = getSize().width;

        return "<html><body style='text-align:center; width:"+Integer.toString(max_width)+"px'><p>"+str+"</p></body></html>";
    }

    public void setLabel(String label)
    {
        lblLabel.setText(getHtmlLabel(label));
    }

    public void showProgress(boolean isVisible)
    {
        progbar.setVisible(isVisible);
    }

    public void setProgress(int value)
    {
        //Tools.logit("Progress: "+value);
        progbar.setValue(value);
    }

    @Override
    public Component.BaselineResizeBehavior getBaselineResizeBehavior() {
        return Component.BaselineResizeBehavior.CONSTANT_ASCENT;
    }

    @Override
    public int getBaseline(int width, int height) {
        return 0;
    }

    protected boolean m_highlight = false;
    public void setHighlight(boolean highlight)
    {
        m_highlight = highlight;

        if (highlight)
        {
            this.setBackground(ColorFactory.getInstance().getColor("SkyBlue"));
            setOpaque(true);
        }
        else
        {
            this.setBackground(ColorFactory.TRANSPARENT);
            setOpaque(false);
        }
    }

    public boolean isHighlight()
    {
        return m_highlight;
    }

    public void setGroup(FileItemPanelGroup group)
    {
        m_group = group;
    }

    public FileItemPanelGroup getGroup()
    {
        return m_group;
    }

    @Override
    public void dragGestureRecognized(DragGestureEvent dge)
    {
        Log.entering("dragGestureRecognized");

        if (m_group == null)
        {
            Log.finer("Panel group not defined.");
            return;
        }

        Cursor cursor = null;

        if (dge.getDragAction() == DnDConstants.ACTION_COPY)
        {
            cursor = DragSource.DefaultCopyDrop;
        }

        Transferable transferableObjects = null;

        if (m_item.getCloudController().getCloudType() == CloudType.LOCAL_FILE_SYSTEM)
        {
            transferableObjects = ListLocalTransferable.createInstance(m_item.getCloudController(), m_group.getSelected());
        }
        else if (m_item.getCloudController().getCloudType() == CloudType.GOOGLE_DRIVE)
        {
            transferableObjects = ListGDriveTransferable.createInstance(m_item.getCloudController(), m_group.getSelected());
        }
        else if (m_item.getCloudController().getCloudType() == CloudType.DROPBOX)
        {
            transferableObjects = ListDropboxTransferable.createInstance(m_item.getCloudController(), m_group.getSelected());
        }
        else
        {
            Log.fine("not supported drag type");
            return;
        }

        if (transferableObjects != null)
        {
            dge.startDrag(cursor, transferableObjects);
        }
    }
}
